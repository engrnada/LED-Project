/*
*<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< DIO_Program.c>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
* Auther: Nada Hassan
* Layer : Main
* SWC : DIO/GPIO
*
*/
#include <stdio.h>
#include "STD_TYPES.h"
#include "BIT_MATH.h"

#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"

DIO_ErrorState DIO_enumSetPinDirection    (u8 Copy_u8PORT, u8 Copy_u8PIN, u8 Copy_u8DIRECTION){
    DIO_ErrorState LOC_enumState = DIO_OK;
 if((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7)){
   if( Copy_u8DIRECTION == DIO_PIN_OUTPUT){
      switch (Copy_u8PORT){
       case DIO_PORTA : SET_BIT(DDRA, Copy_u8PIN); break;
       case DIO_PORTB : SET_BIT(DDRB, Copy_u8PIN); break;
       case DIO_PORTC : SET_BIT(DDRC,  Copy_u8PIN); break;
       case DIO_PORTD : SET_BIT(DDRD,  Copy_u8PIN); break;

 }

}
   else if( Copy_u8DIRECTION == DIO_PIN_INPUT){
      switch (Copy_u8PORT){
       case DIO_PORTA : CLR_BIT(DDRA, Copy_u8PIN); break;
       case DIO_PORTB : CLR_BIT(DDRB, Copy_u8PIN); break;
       case DIO_PORTC : CLR_BIT(DDRC, Copy_u8PIN); break;
       case DIO_PORTD : CLR_BIT(DDRD,Copy_u8PIN); break;

 }

}
   else {LOC_enumState = DIO_NOK;}
}
 return LOC_enumState;
}
DIO_ErrorState DIO_enumSetPinValue (u8 Copy_u8PORT, u8 Copy_u8PIN, u8 Copy_u8VALUE){
	 DIO_ErrorState LOC_enumState = DIO_OK;
	 if((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7)){
if( Copy_u8VALUE == DIO_PIN_HIGH){
      switch (Copy_u8PORT){
       case DIO_PORTA : SET_BIT(PORTA, Copy_u8PIN); break;
       case DIO_PORTB : SET_BIT(PORTB,  Copy_u8PIN); break;
       case DIO_PORTC : SET_BIT(PORTC,  Copy_u8PIN); break;
       case DIO_PORTD : SET_BIT(PORTD, Copy_u8PIN); break;

 }

}
else if(Copy_u8VALUE == DIO_PIN_LOW){
      switch (Copy_u8PORT){
       case DIO_PORTA : CLR_BIT(PORTA,Copy_u8PIN); break;
       case DIO_PORTB : CLR_BIT(PORTB, Copy_u8PIN); break;
       case DIO_PORTC : CLR_BIT(PORTC, Copy_u8PIN); break;
       case DIO_PORTD : CLR_BIT(PORTD, Copy_u8PIN); break;

 }

}
else {LOC_enumState = DIO_NOK;}
}
	 return LOC_enumState;
}
DIO_ErrorState DIO_enumGetPinValue (u8 Copy_u8PORT, u8 Copy_u8PIN, u8* Copy_PtrData){
	 DIO_ErrorState LOC_enumState = DIO_OK;
 if((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7)){
       switch (Copy_u8PORT){
       case DIO_PORTA : * Copy_PtrData = GET_BIT(PINA, Copy_u8PIN); break;
       case DIO_PORTB : * Copy_PtrData = GET_BIT(PINB,Copy_u8PIN); break;
       case DIO_PORTC : * Copy_PtrData = GET_BIT(PINC, Copy_u8PIN); break;
       case DIO_PORTD : * Copy_PtrData = GET_BIT(PIND, Copy_u8PIN); break;

 }
 }
else {
	LOC_enumState = DIO_NOK;
}
 return LOC_enumState;

}
void Delay_time(int a){
	int add;
	int time;
	int i;
	time = a * 1000;
	for(i=0; i<time ; i++){
		add*=i;
		add++;
		add++;

	}

}

int main (){



	DIO_enumSetPinDirection(DIO_PORTA, DIO_PIN3, DIO_PIN_OUTPUT);
	DIO_enumSetPinValue (DIO_PORTA, DIO_PIN3, DIO_PIN_HIGH);
	DIO_enumSetPinDirection(DIO_PORTA, DIO_PIN4, DIO_PIN_OUTPUT);
	DIO_enumSetPinValue (DIO_PORTA, DIO_PIN4, DIO_PIN_HIGH);
	Delay_time(5);
	DIO_enumSetPinDirection(DIO_PORTA, DIO_PIN3, DIO_PIN_INPUT);
	DIO_enumSetPinValue (DIO_PORTA, DIO_PIN3, DIO_PIN_LOW);
	DIO_enumSetPinDirection(DIO_PORTA, DIO_PIN4, DIO_PIN_INPUT);
	DIO_enumSetPinValue (DIO_PORTA, DIO_PIN4, DIO_PIN_LOW);
	Delay_time(5);

	DIO_enumSetPinDirection(DIO_PORTA, DIO_PIN2, DIO_PIN_OUTPUT);
		DIO_enumSetPinValue (DIO_PORTA, DIO_PIN2, DIO_PIN_HIGH);
		DIO_enumSetPinDirection(DIO_PORTA, DIO_PIN5, DIO_PIN_OUTPUT);
		DIO_enumSetPinValue (DIO_PORTA, DIO_PIN5, DIO_PIN_HIGH);
		Delay_time(5);
		DIO_enumSetPinDirection(DIO_PORTA, DIO_PIN2, DIO_PIN_INPUT);
	    DIO_enumSetPinValue (DIO_PORTA, DIO_PIN2, DIO_PIN_LOW);
		DIO_enumSetPinDirection(DIO_PORTA, DIO_PIN5, DIO_PIN_INPUT);
		DIO_enumSetPinValue (DIO_PORTA, DIO_PIN5, DIO_PIN_LOW);
		Delay_time(5);

		DIO_enumSetPinDirection(DIO_PORTA, DIO_PIN1, DIO_PIN_OUTPUT);
			DIO_enumSetPinValue (DIO_PORTA, DIO_PIN1, DIO_PIN_HIGH);
			DIO_enumSetPinDirection(DIO_PORTA, DIO_PIN6, DIO_PIN_OUTPUT);
			DIO_enumSetPinValue (DIO_PORTA, DIO_PIN6, DIO_PIN_HIGH);
			Delay_time(5);
			DIO_enumSetPinDirection(DIO_PORTA, DIO_PIN1, DIO_PIN_INPUT);
			DIO_enumSetPinValue (DIO_PORTA, DIO_PIN1, DIO_PIN_LOW);
			DIO_enumSetPinDirection(DIO_PORTA, DIO_PIN6, DIO_PIN_INPUT);
			DIO_enumSetPinValue (DIO_PORTA, DIO_PIN6, DIO_PIN_LOW);
			Delay_time(5);

			DIO_enumSetPinDirection(DIO_PORTA, DIO_PIN0, DIO_PIN_OUTPUT);
			DIO_enumSetPinValue (DIO_PORTA, DIO_PIN0, DIO_PIN_HIGH);
			DIO_enumSetPinDirection(DIO_PORTA, DIO_PIN7, DIO_PIN_OUTPUT);
			DIO_enumSetPinValue (DIO_PORTA, DIO_PIN7, DIO_PIN_HIGH);
			Delay_time(5);
			DIO_enumSetPinDirection(DIO_PORTA, DIO_PIN0, DIO_PIN_INPUT);
		    DIO_enumSetPinValue (DIO_PORTA, DIO_PIN0, DIO_PIN_LOW);
			DIO_enumSetPinDirection(DIO_PORTA, DIO_PIN7, DIO_PIN_INPUT);
			DIO_enumSetPinValue (DIO_PORTA, DIO_PIN7, DIO_PIN_LOW);
			Delay_time(5);

Delay_time(10);
main();

	return 0;
}


